import random, math

def conflicts(board):
    """Count attacking queen pairs."""
    n = len(board)
    count = 0
    for i in range(n):
        for j in range(i+1, n):
            if board[i] == board[j] or abs(board[i]-board[j]) == abs(i-j):
                count += 1
    return count

def random_neighbor(board):
    """Move one queen to a random column in its row."""
    n = len(board)
    new_board = board[:]
    row = random.randint(0, n-1)
    col = random.randint(0, n-1)
    new_board[row] = col
    return new_board

def simulated_annealing(n, max_steps=10000, temp=100.0, cooling=0.99):
    board = [random.randint(0, n-1) for _ in range(n)] # random start
    for step in range(max_steps):
        c = conflicts(board)
        if c == 0:
            return board
        neighbor = random_neighbor(board)
        nc = conflicts(neighbor)

        # accept better or sometimes worse solutions
        if nc < c or random.random() < math.exp((c-nc)/temp):
            board = neighbor

        temp *= cooling
        if temp < 1e-6: # stop if too cold
            break
    return None

# Example usage
N = 8
solution = simulated_annealing(N)
print("Solution:", solution)
